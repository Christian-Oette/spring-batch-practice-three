{"version":3,"sources":["components/Navbars/AdminNavbar.js","components/Footers/AdminFooter.js","components/Sidebar/Sidebar.js","redux/actions/index.js","api/index.js","components/Headers/Header.js","routes.js","views/Index.js","layouts/Admin.js","redux/reducers/jobDefinition.js","redux/reducers/isConnected.js","redux/reducers/jobNames.js","redux/reducers/currentJob.js","redux/reducers/index.js","index.js"],"names":["AdminNavbar","isConnected","useSelector","state","Navbar","className","expand","id","Container","fluid","Footer","Row","Col","xl","href","rel","target","React","Component","Sidebar","props","collapseOpen","toggleCollapse","setState","closeCollapse","createLinks","routes","map","prop","key","NavItem","NavLink","to","layout","path","tag","NavLinkRRD","onClick","activeClassName","icon","name","activeRoute","bind","routeName","this","location","pathname","indexOf","logo","type","NavbarBrand","navbarBrandProps","Nav","Collapse","navbar","isOpen","xs","defaultProps","connect","setJobDefinitions","nrOfResults","payload","setJobNames","jobNames","urlPrefix","loadJobDefinitions","store","fetch","then","response","json","data","dispatch","value","catch","loadJobInstancesAndDispatch","jobName","console","log","loadJobExecutionsAndDispatch","instanceId","Header","useDispatch","numberOfJobDefinitions","jobDefinition","lg","Card","CardBody","CardTitle","Input","cl","placeholder","bsSize","parameter","document","getElementById","method","component","currentJobData","currentJobName","currentInstance","jobInstances","instances","jobExecutions","executions","CardHeader","Button","color","e","preventDefault","size","Table","responsive","scope","jobInstance","version","execution","status","isRunning","contextInfo","executionId","Admin","getRoutes","getBrandText","i","length","documentElement","scrollTop","scrollingElement","refs","mainContent","innerLink","ref","brandText","from","AdminFooter","jobDefinitionReducer","action","isConnectedReducer","jobNamesReducer","currentJobReducer","items","allReducers","combineReducers","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","sse","EventSource","onopen","onerror","error","addEventListener","getState","reloadOnPing","reloadOnJobEvent"],"mappings":"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","file":"static/js/main.612e664d.chunk.js","sourcesContent":["/*!\n\n=========================================================\n* Argon Dashboard React - v1.1.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/argon-dashboard-react\n* Copyright 2019 Creative Tim (https://www.creative-tim.com)\n* Licensed under MIT (https://github.com/creativetimofficial/argon-dashboard-react/blob/master/LICENSE.md)\n\n* Coded by Creative Tim\n\n=========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n*/\nimport React from \"react\";\nimport {useSelector} from 'react-redux';\n// reactstrap components\nimport {\n  Navbar,\n  Container\n} from \"reactstrap\";\n\nconst AdminNavbar = () => {\n  const isConnected = useSelector(state => state.isConnected);\n\n    return (\n      <>\n        <Navbar className=\"navbar-top navbar-dark\" expand=\"md\" id=\"navbar-main\">\n          <Container fluid>\n            {isConnected && (\n                <>Connected</>\n            )}\n            {!isConnected && (                     \n                <>Disconnected</> \n            )}\n            \n            \n          </Container>\n        </Navbar>\n      </>\n    );\n  //}\n}\n\nexport default AdminNavbar;\n","/*!\n\n=========================================================\n* Argon Dashboard React - v1.1.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/argon-dashboard-react\n* Copyright 2019 Creative Tim (https://www.creative-tim.com)\n* Licensed under MIT (https://github.com/creativetimofficial/argon-dashboard-react/blob/master/LICENSE.md)\n\n* Coded by Creative Tim\n\n=========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n*/\n/*eslint-disable*/\nimport React from \"react\";\n\n// reactstrap components\nimport { Container, Row, Col, Nav, NavItem, NavLink } from \"reactstrap\";\n\nclass Footer extends React.Component {\n  render() {\n    return (\n      <footer className=\"footer\">\n        <Row className=\"align-items-center justify-content-xl-between\">\n          <Col xl=\"6\">\n            <div className=\"copyright text-center text-xl-left text-muted\">\n              © 2020{\" \"}\n              <a\n                className=\"font-weight-bold ml-1\"\n                href=\"https://christianoette.com\"\n                rel=\"noopener noreferrer\"\n                target=\"_blank\"\n              >\n                Christian Oette\n              </a>\n            </div>\n          </Col>\n\n        </Row>\n      </footer>\n    );\n  }\n}\n\nexport default Footer;\n","/*!\n\n=========================================================\n* Argon Dashboard React - v1.1.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/argon-dashboard-react\n* Copyright 2019 Creative Tim (https://www.creative-tim.com)\n* Licensed under MIT (https://github.com/creativetimofficial/argon-dashboard-react/blob/master/LICENSE.md)\n\n* Coded by Creative Tim\n\n=========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n*/\n/*eslint-disable*/\nimport React from \"react\";\nimport { NavLink as NavLinkRRD, Link } from \"react-router-dom\";\n// nodejs library to set properties for components\nimport { PropTypes } from \"prop-types\";\n\n// reactstrap components\nimport {\n  Collapse,\n  DropdownMenu,\n  DropdownItem,\n  UncontrolledDropdown,\n  DropdownToggle,\n  Form,\n  Input,\n  InputGroupAddon,\n  InputGroupText,\n  InputGroup,\n  Media,\n  NavbarBrand,\n  Navbar,\n  NavItem,\n  NavLink,\n  Nav,\n  Container,\n  Row,\n  Col\n} from \"reactstrap\";\n\nvar ps;\n\nclass Sidebar extends React.Component {\n  state = {\n    collapseOpen: false\n  };\n  constructor(props) {\n    super(props);\n    this.activeRoute.bind(this);\n  }\n  // verifies if routeName is the one active (in browser input)\n  activeRoute(routeName) {\n    return this.props.location.pathname.indexOf(routeName) > -1 ? \"active\" : \"\";\n  }\n  // toggles collapse between opened and closed (true/false)\n  toggleCollapse = () => {\n    this.setState({\n      collapseOpen: !this.state.collapseOpen\n    });\n  };\n  // closes the collapse\n  closeCollapse = () => {\n    this.setState({\n      collapseOpen: false\n    });\n  };\n  // creates the links that appear in the left menu / Sidebar\n  createLinks = routes => {\n    return routes.map((prop, key) => {\n      return (\n        <NavItem key={key}>\n          <NavLink\n            to={prop.layout + prop.path}\n            tag={NavLinkRRD}\n            onClick={this.closeCollapse}\n            activeClassName=\"active\"\n          >\n            <i className={prop.icon} />\n            {prop.name}\n          </NavLink>\n        </NavItem>\n      );\n    });\n  };\n  render() {\n    const {  routes, logo } = this.props;\n    let navbarBrandProps;\n    \n    return (\n      <Navbar\n        className=\"navbar-vertical fixed-left navbar-light bg-white\"\n        expand=\"md\"\n        id=\"sidenav-main\"\n      >\n        <Container fluid>\n          {/* Toggler */}\n          <button\n            className=\"navbar-toggler\"\n            type=\"button\"\n            onClick={this.toggleCollapse}\n          >\n            <span className=\"navbar-toggler-icon\" />\n          </button>\n          {/* Brand */}\n          {logo ? (\n            <NavbarBrand className=\"pt-0\" {...navbarBrandProps}>\n              Batch Dashboard\n            </NavbarBrand>\n          ) : null}\n          {/* User */}\n          <Nav className=\"align-items-center d-md-none\">\n            \n          </Nav>\n          {/* Collapse */}\n          <Collapse navbar isOpen={this.state.collapseOpen}>\n            {/* Collapse header */}\n            <div className=\"navbar-collapse-header d-md-none\">\n              <Row>                \n                <Col className=\"collapse-close\" xs=\"6\">\n                  <button\n                    className=\"navbar-toggler\"\n                    type=\"button\"\n                    onClick={this.toggleCollapse}\n                  >\n                    <span />\n                    <span />\n                  </button>\n                </Col>\n              </Row>\n            </div>\n            {/* Form */}\n            \n            {/* Navigation */}\n            <Nav navbar>{this.createLinks(routes)}</Nav>\n            {/* Divider */}\n            <hr className=\"my-3\" />\n            \n          </Collapse>\n        </Container>\n      </Navbar>\n    );\n  }\n}\n\nSidebar.defaultProps = {\n  routes: [{}]\n};\n\nSidebar.propTypes = {\n  // links that will be displayed inside the component\n  routes: PropTypes.arrayOf(PropTypes.object),\n  logo: PropTypes.shape({\n    // innerLink is for links that will direct the user within the app\n    // it will be rendered as <Link to=\"...\">...</Link> tag\n    innerLink: PropTypes.string,\n    // outterLink is for links that will direct the user outside the app\n    // it will be rendered as simple <a href=\"...\">...</a> tag\n    outterLink: PropTypes.string    \n  })\n};\n\nexport default Sidebar;\n","export const connect = (isConnected) => {\r\n    if (isConnected) {\r\n        return {\r\n            type: 'CONNECTED'\r\n        }\r\n    } else {\r\n        return {\r\n            type: 'DISCONNECTED'\r\n        }\r\n    }\r\n}\r\nexport const  setJobDefinitions = (nrOfResults) => {   \r\n    return {\r\n        type: 'JOB_DEFINITIONS',\r\n        payload: nrOfResults\r\n    }\r\n}\r\n\r\nexport const  setJobNames = (jobNames) => {   \r\n    return {\r\n        type: 'JOB_NAMES',\r\n        payload: jobNames\r\n    }\r\n}\r\n\r\nexport const setCurrentJob = (jobName) => {   \r\n    return {\r\n        type: 'CURRENT_JOB',\r\n        payload: jobName\r\n    }\r\n}\r\n","import {setJobDefinitions, setJobNames} from '../redux/actions'\r\n//export const host = 'http://localhost:8082'\r\nexport const host = ''\r\nconst urlPrefix = host+'/job-monitoring'\r\n\r\nexport const loadJobDefinitions = (store) => {\r\n    fetch(urlPrefix+'/job-definitions')\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n            store.dispatch(setJobDefinitions(data.value));\r\n        })\r\n        .catch(function () {\r\n            store.dispatch(setJobDefinitions(0));\r\n        });\r\n};\r\n\r\nexport const loadJobNames = (store) => {\r\n    fetch(urlPrefix+'/job-names')\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n            store.dispatch(setJobNames(data.value));\r\n        })\r\n        .catch(function () {\r\n            store.dispatch(setJobNames([]));\r\n        });\r\n};\r\n\r\nexport const loadJobInstancesAndDispatch = (jobName, dispatch) => {\r\n    fetch(urlPrefix+'/job/'+jobName+'/instances')\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n            dispatch({ type: 'JOB_INSTANCES', payload: data.value});\r\n        })\r\n        .catch(function () {\r\n            console.log('Unable to load job instaces');\r\n        });\r\n};\r\n\r\n\r\nexport const loadJobExecutionsAndDispatch = (instanceId, dispatch) => {\r\n    fetch(urlPrefix+'/job/instance/'+instanceId)\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n            dispatch({ type: 'JOB_EXECUTIONS', payload: data.value});\r\n        })\r\n        .catch(function () {\r\n            console.log('Unable to load job executions');\r\n        });\r\n};\r\n\r\nexport const triggerNewJobWithParameter = (jobName) => {\r\n    fetch(urlPrefix+'/job/start-new/?jobName='+jobName, {\r\n        method: \"POST\"\r\n        });\r\n}\r\n\r\nexport const reloadOnJobEvent= (store) => {\r\n    const state = store.getState();\r\n    if (state.currentJobData.name) {\r\n        loadJobInstancesAndDispatch(state.currentJobData.name, store.dispatch);\r\n    }\r\n    if (state.currentJobData.currentInstance) {\r\n        loadJobExecutionsAndDispatch(state.currentJobData.currentInstance, store.dispatch);\r\n    }\r\n}\r\n\r\nexport const reloadOnPing= (store) => {\r\n    loadJobDefinitions(store);\r\n    \r\n    const state = store.getState();   \r\n    if (state.currentJobData.currentInstance) {\r\n        loadJobExecutionsAndDispatch(state.currentJobData.currentInstance, store.dispatch);\r\n    }\r\n}\r\n\r\nexport const stopExecution = (executionId) => {\r\n    fetch(urlPrefix+'/execution/'+executionId+'/stop', {\r\n        method: \"POST\"\r\n        });\r\n}\r\n\r\n\r\nexport const restartExecution = (executionId) => {\r\n    fetch(urlPrefix+'/execution/'+executionId+'/restart', {\r\n        method: \"POST\"\r\n        });\r\n}\r\n\r\nexport const runSimpleJob = (parameter) => {\r\n    fetch(urlPrefix+'/simple-job/start/'+parameter, {\r\n        method: \"POST\"\r\n        });\r\n}\r\n\r\n\r\n","/*!\n\n=========================================================\n* Argon Dashboard React - v1.1.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/argon-dashboard-react\n* Copyright 2019 Creative Tim (https://www.creative-tim.com)\n* Licensed under MIT (https://github.com/creativetimofficial/argon-dashboard-react/blob/master/LICENSE.md)\n\n* Coded by Creative Tim\n\n=========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n*/\nimport React from \"react\";\nimport {useSelector, useDispatch} from 'react-redux'\nimport {loadJobInstancesAndDispatch, runSimpleJob} from '../../api'\n\n\n// reactstrap components\nimport { Card, CardBody, CardTitle, Container, Row, Col,\n  Input\n} from \"reactstrap\";\n\nconst Header = () => {\n\n    const dispatch = useDispatch()\n    const numberOfJobDefinitions = useSelector( state => state.jobDefinition);\n    let jobNames = useSelector(state => state.jobNames)\n    if (!jobNames) {\n      jobNames = [];\n    }\n\n    return (\n      <>\n        <div className=\"header bg-gradient-info pb-8 pt-5 pt-md-8\">\n          <Container fluid>\n            <div className=\"header-body\">\n              {/* Card stats */}\n              <Row>\n                <Col lg=\"6\" xl=\"6\">\n                  <Card className=\"card-stats mb-4 mb-xl-0\">\n                    <CardBody>\n                      <Row>\n                        <div className=\"col\">\n                          <CardTitle\n                            tag=\"h5\"\n                            className=\"text-uppercase text-muted mb-0\"\n                          >\n                            Job Definitions\n                          </CardTitle>\n                          <span className=\"h2 font-weight-bold mb-0\">\n                            {numberOfJobDefinitions}\n                          </span>\n                        </div>\n                        <Col className=\"col-auto\">\n                          <div className=\"icon icon-shape bg-danger text-white rounded-circle shadow\">\n                            <i className=\"fas fa-project-diagram\" />\n                          </div>\n                        </Col>\n                      </Row>\n                      <p className=\"mt-3 mb-0 text-muted text-sm\">\n                        {jobNames.map(jobName => \n                          <span key={jobName} className=\"jobLink\">\n                           <a href=\"#selectJobName\" onClick={() => {\n                                dispatch({ type: 'CURRENT_JOB', payload: jobName })\n                                loadJobInstancesAndDispatch(jobName,dispatch);\n                              }\n                              }>\n                             {jobName}\n                           </a>\n                          </span>\n                        )}                                                                          \n                      </p>\n                    </CardBody>\n                  </Card>\n                </Col>\n                <Col lg=\"6\" xl=\"6\">\n                  <Card className=\"card-stats mb-4 mb-xl-0\">\n                    <CardBody>\n                      <Row>\n                        <div className=\"col\">\n                          <CardTitle\n                            tag=\"h5\"\n                            className=\"text-uppercase text-muted mb-0\"\n                          >\n                            Run simpleJob with parameters\n                          </CardTitle>\n                          <span className=\"h2 font-weight-bold mb-0\">\n                          <Input id=\"param\" type=\"text\" cl placeholder=\"Parameter\" bsSize=\"sm\" />                          \n                          </span>\n                        </div>\n                        <Col className=\"col-auto\">\n                          <div className=\"icon icon-shape bg-yellow text-white rounded-circle shadow\">\n                            <i className=\"fas fa-play\" />\n                          </div>\n                        </Col>\n                      </Row>\n                      <p className=\"mt-3 mb-0 text-muted text-sm\">\n                        <span className=\"text-success mr-2\">\n                        <button onClick={() => runSimpleJob( document.getElementById('param').value)} className=\"btn btn-sm\">Run Job</button>\n                        </span>                        \n                      </p>\n                    </CardBody>\n                  </Card>\n                </Col>\n              </Row>\n            </div>\n          </Container>\n        </div>\n      </>\n    );\n  \n}\n\nexport default Header;\n","import Index from \"views/Index.js\";\n\nvar routes = [\n  {\n    path: \"/index\",\n    name: \"Dashboard\",\n    icon: \"ni ni-tv-2 text-primary\",\n    component: Index,\n    layout: \"/jobs\"\n  }\n];\nexport default routes;\n","/*!\n\n=========================================================\n* Argon Dashboard React - v1.1.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/argon-dashboard-react\n* Copyright 2019 Creative Tim (https://www.creative-tim.com)\n* Licensed under MIT (https://github.com/creativetimofficial/argon-dashboard-react/blob/master/LICENSE.md)\n\n* Coded by Creative Tim\n\n=========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n*/\nimport React from \"react\";\nimport { useSelector, useDispatch } from 'react-redux'\nimport { loadJobExecutionsAndDispatch, triggerNewJobWithParameter, stopExecution, restartExecution } from '../api'\n// reactstrap components\nimport {\n  Button,\n  Card,\n  CardHeader,\n  Table,\n  Container,\n  Row,\n  Col\n} from \"reactstrap\";\n\n\n// core components\n\nimport Header from \"components/Headers/Header.js\";\n\n// A custom hook that builds on useLocation to parse\n// the query string for you.\n/*\nimport {\n  useLocation\n} from \"react-router-dom\";\n\n\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}*/\n\nconst Index = () => {\n  const dispatch = useDispatch();\n  const currentJobData = useSelector(state => state.currentJobData);\n  const currentJobName = currentJobData.name;\n  const currentInstance = currentJobData.currentInstance;\n  const jobInstances = currentJobData.instances ? currentJobData.instances : [];\n  const jobExecutions = currentJobData.executions ? currentJobData.executions : null;\n\n  // JobList\n  return (\n    <>\n      <Header />\n      {/* Page content */}\n      <Container className=\"mt--7\" fluid>\n        <Row className=\"mt-5\">\n          {currentJobName && (\n            <Col className=\"mb-5 mb-xl-0\" xl=\"6\">\n              <Card className=\"shadow\">\n                <CardHeader className=\"border-0\">\n                  <Row className=\"align-items-center\">\n                    <div className=\"col\">\n                      <h3 className=\"mb-0\">Job: {currentJobName}</h3>\n                    </div>\n                    <div className=\"col text-right\">\n                      <Button\n                        color=\"primary\"\n                        href=\"#pablo\"\n                        onClick={e => {\n                          e.preventDefault();\n                          triggerNewJobWithParameter(currentJobName);\n                        }}\n                        size=\"sm\"\n                      >\n                        Trigger new Job without parameters\n                      </Button>\n                    </div>\n                  </Row>\n                </CardHeader>\n                <Table className=\"align-items-center table-flush\" responsive>\n                  <thead className=\"thead-light\">\n                    <tr>\n                      <th scope=\"col\">Instance Id</th>\n                      <th scope=\"col\">Version</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {jobInstances.map(jobInstance =>\n                      <tr key={jobInstance.id}>\n                        <th scope=\"row\">\n                          <a href=\"#selectInstance\" onClick={() => {\n                            dispatch({ type: 'CURRENT_INSTANCE', payload: jobInstance.id })\n                            loadJobExecutionsAndDispatch(jobInstance.id, dispatch);\n                          }\n                          }>\n                            Instance {jobInstance.id}\n                          </a>\n                        </th>\n                        <td>{jobInstance.version}</td>\n                      </tr>)\n                    }\n\n                  </tbody>\n                </Table>\n              </Card>\n            </Col>)}\n          {jobExecutions && (\n            <Col className=\"mb-5 mb-xl-0\" xl=\"6\">\n              <Card className=\"shadow\">\n                <CardHeader className=\"border-0\">\n                  <Row className=\"align-items-center\">\n                    <div className=\"col\">\n                      <h3 className=\"mb-0\">Job Executions for Instance: {currentInstance}</h3>\n                    </div>\n                    <div className=\"col text-right\">\n                    </div>\n                  </Row>\n                </CardHeader>\n                <Table className=\"align-items-center table-flush\" responsive>\n                  <thead className=\"thead-light\">\n                    <tr>\n                      <th scope=\"col\">Status</th>\n                      <th scope=\"col\">Running</th>\n                      <th scope=\"col\">ContextInfo</th>\n                      <th scope=\"col\">Action</th>                      \n                    </tr>\n                  </thead>\n                  <tbody>\n                    {jobExecutions.map(execution =>\n                      <tr key={execution.id}>                        \n                          <td>{execution.status}</td>                          \n                          <td>\n                            {execution.isRunning && (\n                            <i className=\"fas fa-spinner ni spin text-success mr-3\" />\n                          )} \n                          {!execution.isRunning && ( \n                            <>not running</>\n                          )}                          \n                          </td>\n                          <td>{execution.contextInfo}</td>\n                          <td>\n                            <button className=\"btn btn-sm\" onClick={() => stopExecution(execution.id)}>Stop</button>\n                            <button className=\"btn btn-sm\" onClick={() => restartExecution(execution.id)}>Restart</button>\n                          </td>                                               \n                      </tr>\n                    )}                    \n                  </tbody>\n                </Table>\n              </Card>\n            </Col>)}\n        </Row>\n\n\n        {!currentJobName &&\n          <Row className=\"mt-5\">\n            <br></br>          \n            <br></br>\n            <br></br>\n            <br></br>\n            <br></br>\n            <br></br>\n            <br></br>\n            <br></br>\n            <br></br>\n            <br></br>\n            <br></br>\n            <br></br>\n            <br></br>\n          </Row>}\n      </Container>\n    </>\n  );\n\n}\n\nexport default Index;\n","/*!\n\n=========================================================\n* Argon Dashboard React - v1.1.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/argon-dashboard-react\n* Copyright 2019 Creative Tim (https://www.creative-tim.com)\n* Licensed under MIT (https://github.com/creativetimofficial/argon-dashboard-react/blob/master/LICENSE.md)\n\n* Coded by Creative Tim\n\n=========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n*/\nimport React from \"react\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\n// reactstrap components\nimport { Container } from \"reactstrap\";\n// core components\nimport AdminNavbar from \"components/Navbars/AdminNavbar.js\";\nimport AdminFooter from \"components/Footers/AdminFooter.js\";\nimport Sidebar from \"components/Sidebar/Sidebar.js\";\n\nimport routes from \"routes.js\";\n\nclass Admin extends React.Component {\n  componentDidUpdate(e) {\n    document.documentElement.scrollTop = 0;\n    document.scrollingElement.scrollTop = 0;\n    this.refs.mainContent.scrollTop = 0;\n  }\n  getRoutes = routes => {\n    return routes.map((prop, key) => {\n      if (prop.layout === \"/jobs\") {\n        return (\n          <Route\n            path={prop.layout + prop.path}\n            component={prop.component}\n            key={key}\n          />\n        );\n      } else {\n        return null;\n      }\n    });\n  };\n  getBrandText = path => {\n    for (let i = 0; i < routes.length; i++) {\n      if (\n        this.props.location.pathname.indexOf(\n          routes[i].layout + routes[i].path\n        ) !== -1\n      ) {\n        return routes[i].name;\n      }\n    }\n    return \"Brand\";\n  };\n  render() {\n    return (\n      <>\n        <Sidebar\n          {...this.props}\n          routes={routes}\n          logo={{\n            innerLink: \"/jobs/index\"\n          }}\n        />\n        <div className=\"main-content\" ref=\"mainContent\">\n          <AdminNavbar\n            {...this.props}\n            brandText={this.getBrandText(this.props.location.pathname)}\n          />\n          <Switch>\n            {this.getRoutes(routes)}\n            <Redirect from=\"*\" to=\"/jobs\" />\n          </Switch>\n          <Container fluid>\n            <AdminFooter />\n          </Container>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Admin;\n","const jobDefinitionReducer = (state = 0, action) => {\r\n    switch(action.type) {\r\n        case 'JOB_DEFINITIONS': {\r\n            return action.payload;\r\n        }\r\n        default : {\r\n            return state;\r\n        }\r\n    }\r\n}\r\nexport default jobDefinitionReducer;","const isConnectedReducer = (state =false , action) => {\r\n    switch(action.type) {\r\n        case 'CONNECTED': {\r\n            return true;\r\n        }\r\n        case 'DISCONNECTED': {\r\n            return false;\r\n        }\r\n        default : {\r\n            return state;\r\n        }\r\n    }\r\n}\r\nexport default isConnectedReducer;","const jobNamesReducer = (state = [], action) => {\r\n    switch(action.type) {\r\n        case 'JOB_NAMES': {\r\n            return action.payload;\r\n        }\r\n        default : {\r\n            return state;\r\n        }\r\n    }\r\n}\r\nexport default jobNamesReducer;","const currentJobReducer = (state = {}, action) => {\r\n    switch(action.type) {\r\n        case 'CURRENT_JOB': {\r\n            return { name:action.payload, items: []};\r\n        }\r\n        case 'JOB_INSTANCES' : {\r\n            return {...state, instances: action.payload} \r\n        }\r\n        case 'CURRENT_INSTANCE': {\r\n            return {...state, currentInstance: action.payload}\r\n        }\r\n        case 'JOB_EXECUTIONS': {\r\n            return {...state, executions: action.payload.executions}\r\n        }\r\n        default : {\r\n            return state;\r\n        }\r\n    }\r\n}\r\nexport default currentJobReducer;","import jobDefinitionReducer from './jobDefinition';\r\nimport isConnectedReducer from './isConnected';\r\nimport jobNamesReducer from './jobNames';\r\nimport currentJobReducer from './currentJob';\r\nimport {combineReducers} from 'redux';\r\n\r\nconst allReducers = combineReducers(\r\n    {\r\n        jobDefinition: jobDefinitionReducer, \r\n        isConnected: isConnectedReducer,\r\n        jobNames: jobNamesReducer,\r\n        currentJobData: currentJobReducer\r\n    });\r\n\r\nexport default allReducers;","/*!\n\n=========================================================\n* Argon Dashboard React - v1.1.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/argon-dashboard-react\n* Copyright 2019 Creative Tim (https://www.creative-tim.com)\n* Licensed under MIT (https://github.com/creativetimofficial/argon-dashboard-react/blob/master/LICENSE.md)\n\n* Coded by Creative Tim\n\n=========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n*/\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter, Route, Switch, Redirect } from \"react-router-dom\";\n\nimport \"assets/plugins/nucleo/css/nucleo.css\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"assets/scss/argon-dashboard-react.scss\";\n\nimport AdminLayout from \"layouts/Admin.js\";\nimport { createStore } from 'redux';\nimport allReducers from 'redux/reducers';\nimport { Provider } from 'react-redux';\nimport {connect} from './redux/actions';\nimport {loadJobDefinitions, loadJobNames, reloadOnJobEvent, reloadOnPing, host} from 'api';\n\n// Store\nconst store = createStore(allReducers, {    isConnected: true },\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n/*store.subscribe(\n  () => console.log(store.getState())\n);*/\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/jobs\" render={props => <AdminLayout {...props} />} />\n        <Redirect from=\"/\" to=\"/jobs/index\" />\n      </Switch>\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nconst sse = new EventSource(host+'/events/register-client');\n\nsse.onopen = function() {\n  store.dispatch(connect(true));\n};\n\nsse.onerror = function(error) {\n  console.error(error);\n  store.dispatch(connect(false));\n};\n\nsse.addEventListener(\"ping\", function(e) {\n  reloadOnPing(store)\n});\n\n\nsse.addEventListener(\"jobs\", function(e) {\n  reloadOnJobEvent(store);\n});\n\nloadJobDefinitions(store);\nloadJobNames(store);"],"sourceRoot":""}